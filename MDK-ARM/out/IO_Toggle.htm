<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\IO_Toggle.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\IO_Toggle.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu Jul 20 14:38:21 2017
<BR><P>
<H3>Maximum Stack Usage =        656 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
vApp3Task &rArr; mqtt_pub &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[13]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">ADC1_COMP_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[23]">CEC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[12]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[c]">EXTI0_1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[d]">EXTI2_3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[e]">EXTI4_15_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[a]">FLASH_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1d]">I2C1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1e]">I2C2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[8]">PVD_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[b]">RCC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[9]">RTC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1f]">SPI1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[20]">SPI2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[25]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f0xx.o(.text)
 <LI><a href="#[19]">TIM14_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1a]">TIM15_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1b]">TIM16_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1c]">TIM17_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[14]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[15]">TIM1_CC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[16]">TIM2_IRQHandler</a> from timertask.o(i.TIM2_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[17]">TIM3_IRQHandler</a> from stm32f0xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[18]">TIM6_DAC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[f]">TS_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[21]">USART1_IRQHandler</a> from stm32f0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[22]">USART2_IRQHandler</a> from stm32f0xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[7]">WWDG_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[26]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f0xx.o(.text)
 <LI><a href="#[27]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[30]">bMBMResponseTimeoutCB</a> from mbm.o(i.bMBMResponseTimeoutCB) referenced from mbm.o(i.pxMBMGetNewHdl)
 <LI><a href="#[28]">bMBMSerialRTUReceiverAPIV1CB</a> from mbmrtu.o(i.bMBMSerialRTUReceiverAPIV1CB) referenced from mbmrtu.o(i.bMBMSerialRTUTransmitterEmptyAPIV1CB)
 <LI><a href="#[2a]">bMBMSerialRTUT35CB</a> from mbmrtu.o(i.bMBMSerialRTUT35CB) referenced from mbmrtu.o(i.eMBMSerialRTUInit)
 <LI><a href="#[29]">bMBMSerialRTUTransmitterEmptyAPIV1CB</a> from mbmrtu.o(i.bMBMSerialRTUTransmitterEmptyAPIV1CB) referenced from mbmrtu.o(i.eMBMSerialRTUFrameSend)
 <LI><a href="#[2d]">eMBMSerialRTUFrameClose</a> from mbmrtu.o(i.eMBMSerialRTUFrameClose) referenced from mbmrtu.o(i.eMBMSerialRTUInit)
 <LI><a href="#[2c]">eMBMSerialRTUFrameReceive</a> from mbmrtu.o(i.eMBMSerialRTUFrameReceive) referenced from mbmrtu.o(i.eMBMSerialRTUInit)
 <LI><a href="#[2b]">eMBMSerialRTUFrameSend</a> from mbmrtu.o(i.eMBMSerialRTUFrameSend) referenced from mbmrtu.o(i.eMBMSerialRTUInit)
 <LI><a href="#[24]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[32]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[31]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[2e]">vApp2Task</a> from main.o(i.vApp2Task) referenced from main.o(i.main)
 <LI><a href="#[2f]">vApp3Task</a> from main.o(i.vApp3Task) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[110]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[33]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[43]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[111]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[112]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[113]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[114]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[115]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[10c]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[86]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[88]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_pub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[41]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[38]"></a>mktime</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mktime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeStamp
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveSetting
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_pub
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_pub
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveSetting
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameCloseInternal
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveSetting
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d2]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendATCommand
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDataPack
</UL>

<P><STRONG><a name="[d1]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDataPack
</UL>

<P><STRONG><a name="[75]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRSSI
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveSetting
</UL>

<P><STRONG><a name="[5b]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendATCommand
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_pub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveSetting
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>

<P><STRONG><a name="[48]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendATCommand
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveSetting
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[47]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendATCommand
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[73]"></a>strtok</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveSetting
</UL>

<P><STRONG><a name="[3d]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRSSI
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveSetting
</UL>

<P><STRONG><a name="[40]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveSetting
</UL>

<P><STRONG><a name="[39]"></a>_localtime</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[3f]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[34]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[11c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[44]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[45]"></a>Delay</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, 3gmodule.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Delay &rArr; sEE_Init &rArr; sEE_LowLevel_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRCCConfiguration
</UL>

<P><STRONG><a name="[103]"></a>FLASH_SetLatency</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRCCConfiguration
</UL>

<P><STRONG><a name="[7c]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_LEDInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_COMInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGPIOConfiguration
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
</UL>

<P><STRONG><a name="[7b]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_COMInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>I2C_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(i.I2C_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
</UL>

<P><STRONG><a name="[ef]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_Init
</UL>

<P><STRONG><a name="[f7]"></a>I2C_GenerateSTART</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
</UL>

<P><STRONG><a name="[f3]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
</UL>

<P><STRONG><a name="[ee]"></a>I2C_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f0xx_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_Init
</UL>

<P><STRONG><a name="[f5]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[f4]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
</UL>

<P><STRONG><a name="[f1]"></a>I2C_TransferHandling</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, stm32f0xx_i2c.o(i.I2C_TransferHandling))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
</UL>

<P><STRONG><a name="[4a]"></a>LoadSetting</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, setting.o(i.LoadSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LoadSetting &rArr; sEE_ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>MQTTPacket_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mqttpacket.o(i.MQTTPacket_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>

<P><STRONG><a name="[4f]"></a>MQTTPacket_len</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mqttpacket.o(i.MQTTPacket_len))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[4d]"></a>MQTTSerialize_connect</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, mqttconnectclient.o(i.MQTTSerialize_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_pub
</UL>

<P><STRONG><a name="[4e]"></a>MQTTSerialize_connectLength</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_connectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MQTTSerialize_connectLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[56]"></a>MQTTSerialize_disconnect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MQTTSerialize_disconnect &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_pub
</UL>

<P><STRONG><a name="[58]"></a>MQTTSerialize_publish</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, mqttserializepublish.o(i.MQTTSerialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_pub
</UL>

<P><STRONG><a name="[59]"></a>MQTTSerialize_publishLength</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, mqttserializepublish.o(i.MQTTSerialize_publishLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[57]"></a>MQTTSerialize_zero</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, mqttconnectclient.o(i.MQTTSerialize_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
</UL>

<P><STRONG><a name="[55]"></a>MQTTstrlen</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, mqttpacket.o(i.MQTTstrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_NVICInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerInit
</UL>

<P><STRONG><a name="[61]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRTC
</UL>

<P><STRONG><a name="[79]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_LEDInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_COMInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGPIOConfiguration
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
</UL>

<P><STRONG><a name="[60]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRTC
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_COMInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRCCConfiguration
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
</UL>

<P><STRONG><a name="[94]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[7a]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_COMInit
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[ff]"></a>RCC_DeInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRCCConfiguration
</UL>

<P><STRONG><a name="[5c]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, stm32f0xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[5e]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f0xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRCCConfiguration
</UL>

<P><STRONG><a name="[108]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRCCConfiguration
</UL>

<P><STRONG><a name="[101]"></a>RCC_HCLKConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRCCConfiguration
</UL>

<P><STRONG><a name="[100]"></a>RCC_HSEConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRCCConfiguration
</UL>

<P><STRONG><a name="[f0]"></a>RCC_I2CCLKConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_I2CCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
</UL>

<P><STRONG><a name="[62]"></a>RCC_LSEConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[102]"></a>RCC_PCLKConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_PCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRCCConfiguration
</UL>

<P><STRONG><a name="[106]"></a>RCC_PLLCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRCCConfiguration
</UL>

<P><STRONG><a name="[105]"></a>RCC_PLLConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRCCConfiguration
</UL>

<P><STRONG><a name="[64]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[63]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[107]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRCCConfiguration
</UL>

<P><STRONG><a name="[5d]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f0xx_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRCCConfiguration
</UL>

<P><STRONG><a name="[6a]"></a>RTC_EnterInitMode</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f0xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[6b]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[66]"></a>RTC_GetDate</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f0xx_rtc.o(i.RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeStamp
</UL>

<P><STRONG><a name="[68]"></a>RTC_GetTime</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f0xx_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeStamp
</UL>

<P><STRONG><a name="[69]"></a>RTC_Init</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f0xx_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
</UL>

<P><STRONG><a name="[c5]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_rtc.o(i.RTC_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRTC
</UL>

<P><STRONG><a name="[6c]"></a>RTC_SetDate</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32f0xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
</UL>

<P><STRONG><a name="[6e]"></a>RTC_SetTime</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f0xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
</UL>

<P><STRONG><a name="[6f]"></a>RTC_TimeRegulate</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, datapacket.o(i.RTC_TimeRegulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTC_TimeRegulate &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveSetting
</UL>

<P><STRONG><a name="[65]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f0xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRTC
</UL>

<P><STRONG><a name="[70]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_rtc.o(i.RTC_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
</UL>

<P><STRONG><a name="[71]"></a>ReceiveSetting</STRONG> (Thumb, 540 bytes, Stack size 296 bytes, setting.o(i.ReceiveSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ReceiveSetting &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WriteBuffer
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>STM_RTU_COMInit</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, stm320xx8_rtu.o(i.STM_RTU_COMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = STM_RTU_COMInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetDEDeassertionTime
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetDEAssertionTime
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DEPolarityConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DECmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUARTConfiguration
</UL>

<P><STRONG><a name="[83]"></a>STM_RTU_LEDInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm320xx8_rtu.o(i.STM_RTU_LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = STM_RTU_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLEDConfiguration
</UL>

<P><STRONG><a name="[c0]"></a>STM_RTU_LEDOff</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm320xx8_rtu.o(i.STM_RTU_LEDOff))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOverTCP
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPUSART1ISR
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRSSI
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLEDConfiguration
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIOSetLED
</UL>

<P><STRONG><a name="[c1]"></a>STM_RTU_LEDOn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm320xx8_rtu.o(i.STM_RTU_LEDOn))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOverTCP
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_TIMEOUT_UserCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPUSART1ISR
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init3GModule
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRSSI
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIOSetLED
</UL>

<P><STRONG><a name="[84]"></a>STM_RTU_NVICInit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm320xx8_rtu.o(i.STM_RTU_NVICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STM_RTU_NVICInit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNVICConfiguration
</UL>

<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_syscfg.o(i.SYSCFG_MemoryRemapConfig))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SystemInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>TIM2_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, timertask.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM3_IRQHandler &rArr; vMBPTimerISR &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPTimerISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPTimerISR
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp3Task
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp2Task
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerInit
</UL>

<P><STRONG><a name="[8e]"></a>TIM_Configuration</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, timertask.o(i.TIM_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>TIM_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f0xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPTimerISR
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerInit
</UL>

<P><STRONG><a name="[8f]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerInit
</UL>

<P><STRONG><a name="[21]"></a>USART1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; vMBPUSART1ISR &rArr; prvvMBPUSART1_TXE_ISR &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPUSART1ISR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART2_IRQHandler &rArr; USARTx_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_COMInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialClose
</UL>

<P><STRONG><a name="[7e]"></a>USART_DECmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_DECmd))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_COMInit
</UL>

<P><STRONG><a name="[81]"></a>USART_DEPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_DEPolarityConfig))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_COMInit
</UL>

<P><STRONG><a name="[78]"></a>USART_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f0xx_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_COMInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialClose
</UL>

<P><STRONG><a name="[e9]"></a>USART_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOverTCP
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvMBPUSART1_RXNE_ISR
</UL>

<P><STRONG><a name="[95]"></a>USART_GetITStatus</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f0xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPUSART1ISR
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>USART_ITConfig</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f0xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOverTCP
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_IRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveSetting
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialTxEnable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialRxEnable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvMBPUSART1_TXE_ISR
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvMBPUSART1_TC_ISR
</UL>

<P><STRONG><a name="[7d]"></a>USART_Init</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, stm32f0xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_COMInit
</UL>

<P><STRONG><a name="[96]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_IRQHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvMBPUSART1_RXNE_ISR
</UL>

<P><STRONG><a name="[97]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_IRQHandler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvMBPUSART1_TXE_ISR
</UL>

<P><STRONG><a name="[7f]"></a>USART_SetDEAssertionTime</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_SetDEAssertionTime))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_COMInit
</UL>

<P><STRONG><a name="[80]"></a>USART_SetDEDeassertionTime</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_SetDEDeassertionTime))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_COMInit
</UL>

<P><STRONG><a name="[92]"></a>USARTx_IRQHandler</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, stm32f0xx_it.o(i.USARTx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USARTx_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>__0sprintf$6</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11d]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[d0]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_pub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDataPack
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_open
</UL>

<P><STRONG><a name="[a5]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tasks.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBExceptionToErrorcode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadInputRegistersPolled
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadHoldingRegistersPolled
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadDiscreteInputsPolled
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMMasterTransactionPolled
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadCoilsPolled
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[11e]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[11f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[120]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[121]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b6]"></a>bMBMIsHdlValid</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mbm.o(i.bMBMIsHdlValid))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameSend
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameReceive
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameClose
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadInputRegistersPolled
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadHoldingRegistersPolled
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadDiscreteInputsPolled
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadCoilsPolled
</UL>

<P><STRONG><a name="[a3]"></a>bMBPEventGet</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mbportevent.o(i.bMBPEventGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bMBPEventGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMMasterTransactionPolled
</UL>

<P><STRONG><a name="[a4]"></a>eMBExceptionToErrorcode</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, mbutils.o(i.eMBExceptionToErrorcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = eMBExceptionToErrorcode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadInputRegistersPolled
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadHoldingRegistersPolled
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadDiscreteInputsPolled
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadCoilsPolled
</UL>

<P><STRONG><a name="[a6]"></a>eMBMClose</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mbm.o(i.eMBMClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBMClose &rArr; eMBMReleaseHdl &rArr; vMBPEventDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReleaseHdl
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp3Task
</UL>

<P><STRONG><a name="[a8]"></a>eMBMReadCoils</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, mbmfunccoils.o(i.eMBMReadCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = eMBMReadCoils &rArr; vMBMReadCoilsPolled &rArr; vMBMMasterTransactionPolled &rArr; bMBPEventGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadCoilsPolled
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp3Task
</UL>

<P><STRONG><a name="[aa]"></a>eMBMReadDiscreteInputs</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, mbmfuncdisc.o(i.eMBMReadDiscreteInputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = eMBMReadDiscreteInputs &rArr; vMBMReadDiscreteInputsPolled &rArr; vMBMMasterTransactionPolled &rArr; bMBPEventGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadDiscreteInputsPolled
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp3Task
</UL>

<P><STRONG><a name="[ac]"></a>eMBMReadHoldingRegisters</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, mbmfuncholding.o(i.eMBMReadHoldingRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = eMBMReadHoldingRegisters &rArr; vMBMReadHoldingRegistersPolled &rArr; vMBMMasterTransactionPolled &rArr; bMBPEventGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadHoldingRegistersPolled
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp3Task
</UL>

<P><STRONG><a name="[ae]"></a>eMBMReadInputRegisters</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, mbmfuncinput.o(i.eMBMReadInputRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = eMBMReadInputRegisters &rArr; vMBMReadInputRegistersPolled &rArr; vMBMMasterTransactionPolled &rArr; bMBPEventGet
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadInputRegistersPolled
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp3Task
</UL>

<P><STRONG><a name="[b2]"></a>eMBMSerialInit</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, mbm.o(i.eMBMSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = eMBMSerialInit &rArr; eMBMSerialInitExt &rArr; eMBMSerialRTUInit &rArr; eMBPTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialInitExt
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp3Task
</UL>

<P><STRONG><a name="[b3]"></a>eMBMSerialInitExt</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, mbm.o(i.eMBMSerialInitExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = eMBMSerialInitExt &rArr; eMBMSerialRTUInit &rArr; eMBPTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxMBMGetNewHdl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReleaseHdl
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialInit
</UL>

<P><STRONG><a name="[b5]"></a>eMBMSerialRTUInit</STRONG> (Thumb, 392 bytes, Stack size 64 bytes, mbmrtu.o(i.eMBMSerialRTUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = eMBMSerialRTUInit &rArr; eMBPTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameCloseInternal
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialInitExt
</UL>

<P><STRONG><a name="[bd]"></a>eMBPEventCreate</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mbportevent.o(i.eMBPEventCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBPEventCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxMBMGetNewHdl
</UL>

<P><STRONG><a name="[9c]"></a>eMBPEventPost</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mbportevent.o(i.eMBPEventPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eMBPEventPost
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMResponseTimeoutCB
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUTransmitterEmptyAPIV1CB
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUT35CB
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUReceiverAPIV1CB
</UL>

<P><STRONG><a name="[b8]"></a>eMBPSerialClose</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, mbportserial.o(i.eMBPSerialClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eMBPSerialClose &rArr; vMBPAssert
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPAssert
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameCloseInternal
</UL>

<P><STRONG><a name="[bb]"></a>eMBPSerialInit</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, mbportserial.o(i.eMBPSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBPSerialInit &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUInit
</UL>

<P><STRONG><a name="[a0]"></a>eMBPSerialRxEnable</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, mbportserial.o(i.eMBPSerialRxEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBPSerialRxEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPAssert
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameReceive
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUTransmitterEmptyAPIV1CB
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUT35CB
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUReceiverAPIV1CB
</UL>

<P><STRONG><a name="[ba]"></a>eMBPSerialTxEnable</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, mbportserial.o(i.eMBPSerialTxEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBPSerialTxEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPAssert
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameSend
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameReceive
</UL>

<P><STRONG><a name="[bc]"></a>eMBPTimerInit</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, mbporttimer.o(i.eMBPTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eMBPTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxMBMGetNewHdl
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUInit
</UL>

<P><STRONG><a name="[9f]"></a>eMBPTimerStart</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mbporttimer.o(i.eMBPTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBPTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUReceiverAPIV1CB
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMMasterTransactionPolled
</UL>

<P><STRONG><a name="[a2]"></a>eMBPTimerStop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mbporttimer.o(i.eMBPTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBPTimerStop
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameReceive
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUT35CB
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMMasterTransactionPolled
</UL>

<P><STRONG><a name="[d3]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_pub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDataPack
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_open
</UL>

<P><STRONG><a name="[be]"></a>getRSSI</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, 3gmodule.o(i.getRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = getRSSI &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendATCommand
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_LEDOn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_LEDOff
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init3GModule
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp3Task
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp2Task
</UL>

<P><STRONG><a name="[c2]"></a>getTimeStamp</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, datapacket.o(i.getTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = getTimeStamp &rArr; mktime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_pub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDataPack
</UL>

<P><STRONG><a name="[c3]"></a>init3GModule</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, 3gmodule.o(i.init3GModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = init3GModule &rArr; getRSSI &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRTC
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendATCommand
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRSSI
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_LEDOn
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>initRTC</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, datapacket.o(i.initRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initRTC &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init3GModule
</UL>

<P><STRONG><a name="[24]"></a>main</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = main &rArr; ReceiveSetting &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init3GModule
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Configuration
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_MemoryRemapConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveSetting
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSetting
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUARTConfiguration
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRS485Configuration
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRCCConfiguration
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNVICConfiguration
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLEDConfiguration
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGPIOConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[cf]"></a>makeDataPack</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, datapacket.o(i.makeDataPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = makeDataPack &rArr; getTimeStamp &rArr; mktime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeStamp
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp3Task
</UL>

<P><STRONG><a name="[4c]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_pub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDataPack
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSetting
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_open
</UL>

<P><STRONG><a name="[d4]"></a>mqtt_pub</STRONG> (Thumb, 264 bytes, Stack size 184 bytes, qos0pub.o(i.mqtt_pub))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mqtt_pub &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeStamp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_sendPacketBuffer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_open
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp3Task
</UL>

<P><STRONG><a name="[db]"></a>pvPortMalloc</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, heap_2.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[10d]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[46]"></a>sEE_Init</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, stm320518_i2c_ee.o(i.sEE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sEE_Init &rArr; sEE_LowLevel_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[ed]"></a>sEE_LowLevel_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm320xx8_rtu.o(i.sEE_LowLevel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sEE_LowLevel_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_I2CCLKConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_Init
</UL>

<P><STRONG><a name="[4b]"></a>sEE_ReadBuffer</STRONG> (Thumb, 690 bytes, Stack size 48 bytes, stm320518_i2c_ee.o(i.sEE_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = sEE_ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_TIMEOUT_UserCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferHandling
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadSetting
</UL>

<P><STRONG><a name="[f2]"></a>sEE_TIMEOUT_UserCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, 3gmodule.o(i.sEE_TIMEOUT_UserCallback))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_LEDOn
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
</UL>

<P><STRONG><a name="[76]"></a>sEE_WaitEepromStandbyState</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm320518_i2c_ee.o(i.sEE_WaitEepromStandbyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sEE_WaitEepromStandbyState &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_TIMEOUT_UserCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferHandling
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WriteBuffer
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveSetting
</UL>

<P><STRONG><a name="[74]"></a>sEE_WriteBuffer</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, stm320518_i2c_ee.o(i.sEE_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sEE_WriteBuffer &rArr; sEE_WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveSetting
</UL>

<P><STRONG><a name="[f8]"></a>sEE_WritePage</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, stm320518_i2c_ee.o(i.sEE_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sEE_WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_TIMEOUT_UserCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferHandling
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WriteBuffer
</UL>

<P><STRONG><a name="[bf]"></a>sendATCommand</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, 3gmodule.o(i.sendATCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sendATCommand &rArr; sendOverTCP &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOverTCP
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init3GModule
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRSSI
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_close
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_open
</UL>

<P><STRONG><a name="[f9]"></a>sendOverTCP</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, 3gmodule.o(i.sendOverTCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sendOverTCP &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_LEDOn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendATCommand
</UL>

<P><STRONG><a name="[fa]"></a>sendPacket</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, 3gmodule.o(i.sendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sendPacket &rArr; sendOverTCP &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOverTCP
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_sendPacketBuffer
</UL>

<P><STRONG><a name="[fb]"></a>transport_close</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, transport.o(i.transport_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = transport_close &rArr; sendATCommand &rArr; sendOverTCP &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendATCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_sendPacketBuffer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_open
</UL>

<P><STRONG><a name="[d6]"></a>transport_open</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, transport.o(i.transport_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = transport_open &rArr; transport_close &rArr; sendATCommand &rArr; sendOverTCP &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendATCommand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_close
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_pub
</UL>

<P><STRONG><a name="[d7]"></a>transport_sendPacketBuffer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, transport.o(i.transport_sendPacketBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = transport_sendPacketBuffer &rArr; transport_close &rArr; sendATCommand &rArr; sendOverTCP &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_close
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_pub
</UL>

<P><STRONG><a name="[b9]"></a>usMBMCRC16</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mbmcrc.o(i.usMBMCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usMBMCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameSend
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameReceive
</UL>

<P><STRONG><a name="[e1]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2e]"></a>vApp2Task</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.vApp2Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vApp2Task &rArr; getRSSI &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRSSI
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2f]"></a>vApp3Task</STRONG> (Thumb, 398 bytes, Stack size 352 bytes, main.o(i.vApp3Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = vApp3Task &rArr; mqtt_pub &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPAssert
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_pub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDataPack
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRSSI
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReadInputRegisters
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReadHoldingRegisters
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReadDiscreteInputs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReadCoils
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMClose
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIOSetLED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[e7]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[e5]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[d9]"></a>vListInsert</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[10e]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[fe]"></a>vMBMMasterTransactionPolled</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, mbm.o(i.vMBMMasterTransactionPolled))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vMBMMasterTransactionPolled &rArr; bMBPEventGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerStop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerStart
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBPEventGet
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadInputRegistersPolled
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadHoldingRegistersPolled
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadDiscreteInputsPolled
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMReadCoilsPolled
</UL>

<P><STRONG><a name="[a9]"></a>vMBMReadCoilsPolled</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, mbmfunccoils.o(i.vMBMReadCoilsPolled))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vMBMReadCoilsPolled &rArr; vMBMMasterTransactionPolled &rArr; bMBPEventGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBExceptionToErrorcode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMMasterTransactionPolled
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMIsHdlValid
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReadCoils
</UL>

<P><STRONG><a name="[ab]"></a>vMBMReadDiscreteInputsPolled</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, mbmfuncdisc.o(i.vMBMReadDiscreteInputsPolled))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vMBMReadDiscreteInputsPolled &rArr; vMBMMasterTransactionPolled &rArr; bMBPEventGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBExceptionToErrorcode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMMasterTransactionPolled
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMIsHdlValid
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReadDiscreteInputs
</UL>

<P><STRONG><a name="[ad]"></a>vMBMReadHoldingRegistersPolled</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, mbmfuncholding.o(i.vMBMReadHoldingRegistersPolled))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vMBMReadHoldingRegistersPolled &rArr; vMBMMasterTransactionPolled &rArr; bMBPEventGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBExceptionToErrorcode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMMasterTransactionPolled
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMIsHdlValid
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReadHoldingRegisters
</UL>

<P><STRONG><a name="[af]"></a>vMBMReadInputRegistersPolled</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, mbmfuncinput.o(i.vMBMReadInputRegistersPolled))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vMBMReadInputRegistersPolled &rArr; vMBMMasterTransactionPolled &rArr; bMBPEventGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBExceptionToErrorcode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMMasterTransactionPolled
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMIsHdlValid
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReadInputRegisters
</UL>

<P><STRONG><a name="[9d]"></a>vMBPAssert</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mbportother.o(i.vMBPAssert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vMBPAssert
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp3Task
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMResponseTimeoutCB
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameSend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameCloseInternal
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUTransmitterEmptyAPIV1CB
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUT35CB
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUReceiverAPIV1CB
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialTxEnable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialRxEnable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialClose
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvMBPUSART1_TXE_ISR
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvMBPUSART1_RXNE_ISR
</UL>

<P><STRONG><a name="[9e]"></a>vMBPEnterCritical</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mbportother.o(i.vMBPEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPAssert
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMClose
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxMBMGetNewHdl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReleaseHdl
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUInit
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameSend
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameReceive
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameCloseInternal
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUTransmitterEmptyAPIV1CB
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUT35CB
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUReceiverAPIV1CB
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerStop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerStart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialTxEnable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialRxEnable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialClose
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEventDelete
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPEventPost
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPEventCreate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBPEventGet
</UL>

<P><STRONG><a name="[b0]"></a>vMBPEventDelete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mbportevent.o(i.vMBPEventDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vMBPEventDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReleaseHdl
</UL>

<P><STRONG><a name="[a1]"></a>vMBPExitCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mbportother.o(i.vMBPExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMClose
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxMBMGetNewHdl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReleaseHdl
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUInit
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameSend
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameReceive
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameCloseInternal
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUTransmitterEmptyAPIV1CB
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUT35CB
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMSerialRTUReceiverAPIV1CB
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerStop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerStart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialTxEnable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialRxEnable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialClose
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEventDelete
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPEventPost
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPEventCreate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBPEventGet
</UL>

<P><STRONG><a name="[b1]"></a>vMBPTimerClose</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mbporttimer.o(i.vMBPTimerClose))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReleaseHdl
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameCloseInternal
</UL>

<P><STRONG><a name="[8d]"></a>vMBPTimerISR</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, mbporttimer.o(i.vMBPTimerISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vMBPTimerISR &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>vMBPUSART1ISR</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mbportserial.o(i.vMBPUSART1ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vMBPUSART1ISR &rArr; prvvMBPUSART1_TXE_ISR &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_LEDOn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_LEDOff
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvMBPUSART1_TXE_ISR
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvMBPUSART1_TC_ISR
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvMBPUSART1_RXNE_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>vPortEnterCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[e2]"></a>vPortExitCritical</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[dc]"></a>vPortFree</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, heap_2.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[109]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[fc]"></a>vTaskDelay</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp2Task
</UL>

<P><STRONG><a name="[ce]"></a>vTaskStartScheduler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[35]"></a>vTaskSwitchContext</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[52]"></a>writeCString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqttpacket.o(i.writeCString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
</UL>

<P><STRONG><a name="[50]"></a>writeChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttpacket.o(i.writeChar))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>

<P><STRONG><a name="[53]"></a>writeInt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mqttpacket.o(i.writeInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
</UL>

<P><STRONG><a name="[54]"></a>writeMQTTString</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mqttpacket.o(i.writeMQTTString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[10a]"></a>xPortStartScheduler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[cd]"></a>xTaskGenericCreate</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>xTaskIncrementTick</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[df]"></a>xTaskResumeAll</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c8]"></a>vGPIOConfiguration</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, main.o(i.vGPIOConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vGPIOConfiguration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>vIOSetLED</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(i.vIOSetLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vIOSetLED
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_LEDOn
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_LEDOff
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApp3Task
</UL>

<P><STRONG><a name="[ca]"></a>vLEDConfiguration</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i.vLEDConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vLEDConfiguration &rArr; STM_RTU_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_LEDOff
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_LEDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>vNVICConfiguration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.vNVICConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vNVICConfiguration &rArr; STM_RTU_NVICInit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_NVICInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>vRCCConfiguration</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, main.o(i.vRCCConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vRCCConfiguration &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLKConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>vRS485Configuration</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, main.o(i.vRS485Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = vRS485Configuration &rArr; vUARTConfiguration &rArr; STM_RTU_COMInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUARTConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>vUARTConfiguration</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, main.o(i.vUARTConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = vUARTConfiguration &rArr; STM_RTU_COMInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_RTU_COMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRS485Configuration
</UL>

<P><STRONG><a name="[89]"></a>SetSysClock</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, system_stm32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5f]"></a>RTC_Config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, datapacket.o(i.RTC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Config &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeRegulate
</UL>

<P><STRONG><a name="[67]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>

<P><STRONG><a name="[6d]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[d8]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[da]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tasks.o(i.prvAllocateTCBAndStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[dd]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[e3]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[32]"></a>prvIdleTask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[e4]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tasks.o(i.prvInitialiseTCBVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvInitialiseTCBVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[e6]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[10f]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[ec]"></a>prvHeapInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, heap_2.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[10b]"></a>prvSetupTimerInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port.o(i.prvSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[31]"></a>prvTaskExitError</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[e8]"></a>prvvMBPUSART1_RXNE_ISR</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mbportserial.o(i.prvvMBPUSART1_RXNE_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvvMBPUSART1_RXNE_ISR &rArr; vMBPAssert
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPUSART1ISR
</UL>

<P><STRONG><a name="[ea]"></a>prvvMBPUSART1_TC_ISR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mbportserial.o(i.prvvMBPUSART1_TC_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvvMBPUSART1_TC_ISR &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPUSART1ISR
</UL>

<P><STRONG><a name="[eb]"></a>prvvMBPUSART1_TXE_ISR</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mbportserial.o(i.prvvMBPUSART1_TXE_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvvMBPUSART1_TXE_ISR &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPAssert
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPUSART1ISR
</UL>

<P><STRONG><a name="[28]"></a>bMBMSerialRTUReceiverAPIV1CB</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, mbmrtu.o(i.bMBMSerialRTUReceiverAPIV1CB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bMBMSerialRTUReceiverAPIV1CB &rArr; eMBPSerialRxEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPAssert
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerStart
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialRxEnable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbmrtu.o(i.bMBMSerialRTUTransmitterEmptyAPIV1CB)
</UL>
<P><STRONG><a name="[2a]"></a>bMBMSerialRTUT35CB</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, mbmrtu.o(i.bMBMSerialRTUT35CB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bMBMSerialRTUT35CB &rArr; eMBPSerialRxEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPAssert
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerStop
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialRxEnable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbmrtu.o(i.eMBMSerialRTUInit)
</UL>
<P><STRONG><a name="[29]"></a>bMBMSerialRTUTransmitterEmptyAPIV1CB</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, mbmrtu.o(i.bMBMSerialRTUTransmitterEmptyAPIV1CB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bMBMSerialRTUTransmitterEmptyAPIV1CB &rArr; eMBPSerialRxEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPAssert
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialRxEnable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbmrtu.o(i.eMBMSerialRTUFrameSend)
</UL>
<P><STRONG><a name="[2d]"></a>eMBMSerialRTUFrameClose</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mbmrtu.o(i.eMBMSerialRTUFrameClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eMBMSerialRTUFrameClose &rArr; eMBMSerialRTUFrameCloseInternal &rArr; eMBPSerialClose &rArr; vMBPAssert
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameCloseInternal
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMIsHdlValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbmrtu.o(i.eMBMSerialRTUInit)
</UL>
<P><STRONG><a name="[b7]"></a>eMBMSerialRTUFrameCloseInternal</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, mbmrtu.o(i.eMBMSerialRTUFrameCloseInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBMSerialRTUFrameCloseInternal &rArr; eMBPSerialClose &rArr; vMBPAssert
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPAssert
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPTimerClose
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialClose
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUInit
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialRTUFrameClose
</UL>

<P><STRONG><a name="[2c]"></a>eMBMSerialRTUFrameReceive</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, mbmrtu.o(i.eMBMSerialRTUFrameReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = eMBMSerialRTUFrameReceive &rArr; eMBPSerialTxEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBMCRC16
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerStop
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialTxEnable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialRxEnable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMIsHdlValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbmrtu.o(i.eMBMSerialRTUInit)
</UL>
<P><STRONG><a name="[2b]"></a>eMBMSerialRTUFrameSend</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, mbmrtu.o(i.eMBMSerialRTUFrameSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = eMBMSerialRTUFrameSend &rArr; eMBPSerialTxEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPAssert
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usMBMCRC16
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPSerialTxEnable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bMBMIsHdlValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbmrtu.o(i.eMBMSerialRTUInit)
</UL>
<P><STRONG><a name="[30]"></a>bMBMResponseTimeoutCB</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mbm.o(i.bMBMResponseTimeoutCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bMBMResponseTimeoutCB &rArr; eMBPEventPost
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPAssert
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPEventPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbm.o(i.pxMBMGetNewHdl)
</UL>
<P><STRONG><a name="[a7]"></a>eMBMReleaseHdl</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, mbm.o(i.eMBMReleaseHdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eMBMReleaseHdl &rArr; vMBPEventDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPTimerClose
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEventDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMClose
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialInitExt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxMBMGetNewHdl
</UL>

<P><STRONG><a name="[b4]"></a>pxMBMGetNewHdl</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, mbm.o(i.pxMBMGetNewHdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pxMBMGetNewHdl &rArr; eMBPTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMReleaseHdl
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPTimerInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPExitCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBPEnterCritical
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPEventCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMSerialInitExt
</UL>

<P><STRONG><a name="[99]"></a>_printf_core</STRONG> (Thumb, 768 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[9b]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9a]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
